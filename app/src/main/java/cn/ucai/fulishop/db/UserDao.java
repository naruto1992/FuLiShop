package cn.ucai.fulishop.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MuserName = new Property(1, String.class, "muserName", false, "USER_NAME");
        public final static Property MuserNick = new Property(2, String.class, "muserNick", false, "USER_NICK");
        public final static Property MavatarId = new Property(3, int.class, "mavatarId", false, "USER_AVATAR_ID");
        public final static Property MavatarPath = new Property(4, String.class, "mavatarPath", false, "USER_AVATAR_PATH");
        public final static Property MavatarSuffix = new Property(5, String.class, "mavatarSuffix", false, "USER_AVATAR_SUFFIX");
        public final static Property MavatarType = new Property(6, int.class, "mavatarType", false, "USER_AVATAR_TYPE");
        public final static Property MavatarLastUpdateTime = new Property(7, String.class, "mavatarLastUpdateTime", false, "USER_AVATAR_TIME");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT UNIQUE ," + // 1: muserName
                "\"USER_NICK\" TEXT," + // 2: muserNick
                "\"USER_AVATAR_ID\" INTEGER NOT NULL ," + // 3: mavatarId
                "\"USER_AVATAR_PATH\" TEXT," + // 4: mavatarPath
                "\"USER_AVATAR_SUFFIX\" TEXT," + // 5: mavatarSuffix
                "\"USER_AVATAR_TYPE\" INTEGER NOT NULL ," + // 6: mavatarType
                "\"USER_AVATAR_TIME\" TEXT);"); // 7: mavatarLastUpdateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String muserName = entity.getMuserName();
        if (muserName != null) {
            stmt.bindString(2, muserName);
        }
 
        String muserNick = entity.getMuserNick();
        if (muserNick != null) {
            stmt.bindString(3, muserNick);
        }
        stmt.bindLong(4, entity.getMavatarId());
 
        String mavatarPath = entity.getMavatarPath();
        if (mavatarPath != null) {
            stmt.bindString(5, mavatarPath);
        }
 
        String mavatarSuffix = entity.getMavatarSuffix();
        if (mavatarSuffix != null) {
            stmt.bindString(6, mavatarSuffix);
        }
        stmt.bindLong(7, entity.getMavatarType());
 
        String mavatarLastUpdateTime = entity.getMavatarLastUpdateTime();
        if (mavatarLastUpdateTime != null) {
            stmt.bindString(8, mavatarLastUpdateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String muserName = entity.getMuserName();
        if (muserName != null) {
            stmt.bindString(2, muserName);
        }
 
        String muserNick = entity.getMuserNick();
        if (muserNick != null) {
            stmt.bindString(3, muserNick);
        }
        stmt.bindLong(4, entity.getMavatarId());
 
        String mavatarPath = entity.getMavatarPath();
        if (mavatarPath != null) {
            stmt.bindString(5, mavatarPath);
        }
 
        String mavatarSuffix = entity.getMavatarSuffix();
        if (mavatarSuffix != null) {
            stmt.bindString(6, mavatarSuffix);
        }
        stmt.bindLong(7, entity.getMavatarType());
 
        String mavatarLastUpdateTime = entity.getMavatarLastUpdateTime();
        if (mavatarLastUpdateTime != null) {
            stmt.bindString(8, mavatarLastUpdateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // muserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // muserNick
            cursor.getInt(offset + 3), // mavatarId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mavatarPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mavatarSuffix
            cursor.getInt(offset + 6), // mavatarType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // mavatarLastUpdateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMuserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMuserNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMavatarId(cursor.getInt(offset + 3));
        entity.setMavatarPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMavatarSuffix(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMavatarType(cursor.getInt(offset + 6));
        entity.setMavatarLastUpdateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
